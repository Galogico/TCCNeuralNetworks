import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader
import torchvision
import numpy

# quantas vezes a rede neural vai passar pelos dados de trino
n_epochs = 3

log_interval = 10

# dados de treino e teste
train_data = torchvision.datasets.MNIST(
    # pasta raiz
    root = "data",
    # se é ou não um arquivo de treino
    train= True,
    # Transforma em tensor
    transform = torchvision.transforms.ToTensor(),
    # baixa da internet
    download= True,
)

test_data = torchvision.datasets.MNIST(
    # pasta raiz
    root = "data",
    # se é ou não um arquivo de treino
    train= False,
    # Transforma em tensor
    transform = torchvision.transforms.ToTensor(),
    # baixa da internet
    download= True,
)



# aqui é algo opcional que eu só mostro como é o DB
# print(train_data.data.shape) 
# OUTPUT ESPERADO: torch.Size([60000, 28, 28])
# esse output indica que existem 1000 imagens sem rgb(pixels de 0 a 1 espaço contínuo) com 28 por 28 pixels


loaders = {
  'train': DataLoader(train_data, batch_size= 100, shuffle = True, num_workers= 1),
  'test': DataLoader(test_data, batch_size= 100, shuffle = True, num_workers= 1)
}


class CNN(nn.Module):
    def __init__(self):
      super(CNN,self).__init__()

      # ver como convolução se aplica numa rede neural
      self.conv1 = nn.Conv2d(1, 10, kernel_size= 5)
      self.conv2 = nn.Conv2d(10, 20, kernel_size= 5)

      # "aleatoriamente" desativa alguns neurônios
      self.drop_conv2 = nn.Dropout2d()

      # uma camada linear conecta com todos os neurônios da camada anterior
      self.fc1 = nn.Linear(320, 50)
      # 10 outputs pra 10 números
      self.fc2 = nn.Linear(50, 10)

      # OBS: o número de neurônios por camada e quantas camadas vai ter depende de que tipo de rede neural você está trabalhando e qual o objetivo.
      # Nesse caso é mais simples trabalhar com 2 lineares e 2 convolucionais
    
    def forward(self, x):
      x = F.relu(F.max_pool2d(self.conv1(x), 2))
      x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))

      x = x.view(-1, 320)

      x = F.relu(self.fc1(x))
      x = F.dropout(x, training=self.training)
      x = self.fc2(x)

      return F.log_softmax(x)


# Usa CUDA se você tiver GPU dedicada + cuda instalado, se não, usa a CPU mesmo
device = torch.device("cuda" if torch.cuda.is_available() else 'CPU')

network = CNN().to(device)

optimizer = optim.Adam(network.parameters(), lr = 0.001)

loss_fn = nn.CrossEntropyLoss()

train_losses = []
train_counter = []
test_losses = []
test_counter = [i*len(loaders['train'].dataset) for i in range(n_epochs + 1)]


def train(epoch):
  network.train()
  for batch_idx, (data, target) in enumerate(loaders["train"]):
    optimizer.zero_grad()
    output = network(data)
    loss = F.nll_loss(output, target)
    loss.backward()
    optimizer.step()
    if batch_idx % log_interval == 0:
      print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
        epoch, batch_idx * len(data), len(loaders["train"].dataset),
        100. * batch_idx / len(loaders["train"]), loss.item()))
      train_losses.append(loss.item())
      train_counter.append(
        (batch_idx*64) + ((epoch-1)*len(loaders["train"].dataset)))
      torch.save(network.state_dict(), '/results/model.pth')
      torch.save(optimizer.state_dict(), '/results/optimizer.pth')

def test():
  network.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad():
    for data, target in loaders["test"]:
      output = network(data)
      test_loss += F.nll_loss(output, target, size_average=False).item()
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum()
  test_loss /= len(loaders["test"].dataset)
  test_losses.append(test_loss)
  print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
    test_loss, correct, len(loaders["test"].dataset),
    100. * correct / len(loaders["test"].dataset)))
  

test()
# for epoch in range(1, n_epochs + 1):
#   train(epoch)
#   test()